name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  # Pour un référentiel public, on sépare le registre et le nom du dépôt
  ECR_REGISTRY: public.ecr.aws/o1p2h2f3
  ECR_REPOSITORY: pedataproject/mlops_project
  ECS_SERVICE: mlops_service
  ECS_CLUSTER: mlops_cluster_final_project
  ECS_TASK_DEFINITION: mlops_task_def
  CONTAINER_NAME: mlops_app

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-public-login@v1

      - name: Build, tag, and push image to Amazon ECR Public
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "IMAGE_TAG=${{ github.sha }}"
          # Construire l'image Docker depuis le Dockerfile
          docker build -t $ECR_REPOSITORY .
          # Taguer l'image avec le tag unique basé sur le commit
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Pousser l'image dans le référentiel public
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Sauvegarder l'URL de l'image pour les étapes suivantes
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query "taskDefinition | {containerDefinitions: containerDefinitions, family: family, executionRoleArn: executionRoleArn, taskRoleArn: taskRoleArn, networkMode: networkMode, requiresCompatibilities: requiresCompatibilities, cpu: cpu, memory: memory}" \
          > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
